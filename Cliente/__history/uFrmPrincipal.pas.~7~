unit uFrmPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Buttons, Vcl.ExtCtrls,
  Vcl.StdCtrls, Vcl.Menus, Vcl.Imaging.jpeg,uModule, uObrigatorio,uValidacaoCNPJ, REST.Json;

type
  TForm1 = class(TForm)
    Pnl_Barra: TPanel;
    BtFechar: TSpeedButton;
    Pnl_Cliente: TPanel;
    EdtNomeCliente: TEdit;
    EdtCNPJ: TEdit;
    LblCliente: TLabel;
    LblNomeCliente: TLabel;
    LblCNPJ: TLabel;
    BtnVerificarCNPJ: TSpeedButton;
    Pnl_VerificarCNPJ: TPanel;
    Result: TLabel;
    LblDataBase: TLabel;
    EdtIP: TEdit;
    EdtPortaServidor: TEdit;
    EdtCaminhoBase: TEdit;
    LblIP: TLabel;
    LblPortaServidor: TLabel;
    LblCaminhoBase: TLabel;
    Pnl_Barrinha: TPanel;
    LblDataSnap: TLabel;
    EdtPorta: TEdit;
    EdtPortaHTTP: TEdit;
    LblPorta: TLabel;
    LblPortaHTTP: TLabel;
    Pnl_Barrinha2: TPanel;
    EdtIP2: TEdit;
    EdtPortaServidor2: TEdit;
    EdtCaminhoBase2: TEdit;
    LblMormot: TLabel;
    LblIP2: TLabel;
    LblPortaServidor2: TLabel;
    LblCaminhoBase2: TLabel;
    Pnl_Barrinha4: TPanel;
    LblAplicacao: TLabel;
    EdtPortaAplicacao: TEdit;
    LblPortaAplicacao: TLabel;
    Pnl_TestarPorta: TPanel;
    BtnTestarPorta: TSpeedButton;
    Pnl_IniciarImplantacao: TPanel;
    BtnImplantar: TSpeedButton;
    LblInfo: TLabel;
    LblInfo2: TLabel;
    Panel1: TPanel;
    BtnMinimizar: TSpeedButton;
    LblNomeSistema: TLabel;
    Pnl_Barrinha3: TPanel;
    procedure BtFecharClick(Sender: TObject);
    procedure BtnMinimizarClick(Sender: TObject);
    procedure BtnImplantarClick(Sender: TObject);
    procedure BtnVerificarCNPJClick(Sender: TObject);


  private
    { Private declarations }
  public
    { Public declarations }
    //function Implantar(const aImplantacao:string;out aErro:string):Boolean;

  end;

TField = class(Tpersistent)
private
  FCampoNome        : String;
  FCampoCNPJ        : Integer;
  FCampoPortaDS     : Integer;
  FCampoPortaHTTP   : Integer;
  FCampoPortaMormot : Integer;

protected
  { protected declarations }
public
  { public declarations }

published
  property CampoNome:string read FCampoNome write FCampoNome;
  property CampoCNPJ:Integer read FCampoCNPJ write FCampoCNPJ;
  property CampoPortaDS:Integer read FCampoPortaDS write FCampoPortaDS;
  property CampoPortaHTTP:Integer read FCampoPortaHTTP write FCampoPortaHTTP;
  property CampoPortaMormot:Integer read FCampoPortaMormot write FCampoPortaMormot;
  end;

  TFactoryJSON<T> = class
  public
    class function JsonToObject(AJson: String): T;virtual;abstract;
    class function ObjectToJSON(AObject: T): String;virtual;abstract;
  end;

  FactoryJSON = class(TFactoryJSON<TField>)
  public
    class function JsonToObject(AJson: String): TField;override;
    class function ObjectToJSON(AObject: TField): String;override;
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

uses uProxyClient;

procedure TForm1.BtFecharClick(Sender: TObject);
// Botão (X) para fechar a aplicação
begin
  Close;
end;
 procedure TForm1.BtnMinimizarClick(Sender: TObject);
// Botão (-) para minimizar a tela do formulário
begin
  Application.Minimize;
end;

procedure TForm1.BtnVerificarCNPJClick(Sender: TObject);
  var aMetod:TServerMethods1Client;
begin
try
// usando as funções isCNPJ e imprimeCNPJ da unit "ValidaCNPJ"
if isCNPJ(EdtCNPJ.Text)then
  begin
    Result.Caption := imprimeCNPJ(EdtCNPJ.Text);
  end
  else
  begin
    Result.Caption := 'Erro: CNPJ inválido!'
  end;

begin
   aMetod:= TServerMethods1Client.Create(ClientModule1.SQLConnection1.DBXConnection);
end;

finally
  aMetod.Free;
end;

end;


procedure TForm1.BtnImplantarClick(Sender: TObject);

var
  Nome, CNPJ, portaDS, HTTPDS, PortaMormout: TJson;
  Json:string;

begin
  prcValidarCamposObrigatorios ( Form1 );

  end;

 { FactoryJSON }

class function FactoryJSON.JsonToObject(AJson: String): TField;
begin
  if (AJson <> '')
      and (AJson <> '{}') then
    Result := TJson.JsonToObject<TField>(AJSON)
  else Result := nil;
end;

class function FactoryJSON.ObjectToJSON(AObject: TField): String;
begin
  if Assigned(AObject) then
    Result := TJson.ObjectToJsonString(AObject)
  else Result := '{}';
end;

end.
